// The sfg standard library is composed of two parts:
// 1. The standard library provided by the compiler, with no support in bcfg
// This library is part of the language spec, but merely outputs standard bytecode
// 2. The standard library implemented by the VM
// This library is expected to be provided by the VM, with extern calls intended
// to be provided by the game engine
// 
// Note that BOTH (1) and (2) must be specified by the compiler, because the
// entire standard library is typechecked. However only (2) must be provided by
// the VM
//
// (1) is further broken down by rsfg by (a) the standard library /written in/ sfg,
// and (b) that with special bytecode emitted by the compiler (written in rust).
//
// This file is implementations of section (a) of (1) and all the externs of (2)

fn internal_times(left: int, right: int) int
	var total = 0
	while right // != 0 implied
		total = total + left // += unimplemented
		right = right - 1
	return total

fn internal_and(left: bool, right: bool) bool
	if left
		return true
	if right
		return true
	return false

fn epsilon_eq(left: float, right: float) bool
	left -= right
	return abs(left) < 0.0001

// for now float only, overloading???
fn abs(what: float) float
	if what < 0
		what *= -1.0
	return what

@fn log(what: str)

